================================================
TITLE SLIDE
================================================

Briefly state the purpose of the presentation
Go over the different sections

================================================ ( 2 MIN )
INTRO
================================================

What is a Password Manager  
=================================================
- A password manager is a software application that helps a user store and organize passwords. 

- Also called a password vault or virtual safe

- Core functionality of a password manager is to securely store large collections of passwords in a single location or in some cases multiple sychronized locations

- Usually stores the passwords encrypted, requiring the user to create a master password; a single, ideally very strong password which grants the user access to their entire password database.

- Some password managers store passwords on the user's computer, whereas others store the data utilizing a cloud

- Many provide additional features beyond the core functionality such as form filling and password generation and securing information that is deemed sensitive enough.



How they work - 1 MIN
=================================================
-The more common managers would encorporate this scheme.  Using a central database stored in a cloud to store all usernames and password for various sites within a cloud based environment.  

-The database would also be stored locally on the users computer, in the event that you cannot access the online database.  Once able to access it, your new information would sync to the cloud.

-They rely on encryption for data protection, where the encryption/decryption process is done locally using a key  that is generated by a combination of the username and/or the master password entered by the user. 

- It's important to know that the master username and password is not stored on the cloud server with the rest of the collection, only the hashed format is so that they can verify who you are.  So even the provider of the service does not know the key credentials

- Some types of password managers would not use this cloud based version at all



================================================( 3 MIN )
TYPES OF PASSWORD MANAGERS
================================================


Types of Password Managers - 1 MIN
=================================================

Password managers can come in these often-combined flavors:

Desktop - 

	Managers that store passwords only on a computer hard drive.  They would store the 		password information inside of an encrypted ( or possibly unencrypted ) file or 		  	  database.  

	The popular browsers like IE, Firefox and Chrome all have built in password managers 	that are used locally and can optionally sync with other devices in various ways.

	(eg. Keepass, Password Safe, Pleasant Password Server )

Embedded security hardware 

	- A type of hardware that is used to save and encrypt your sensitive data through the 		use  of software that requires it.

	- Conforms to the Trusted Computing Platform Alliance ( TCPA ) standard

	- Purpose of this type of password manager is to keep it out of reach from malware or 		anything that is software based.
	
Portable - 

	Managers that are used on a mobile device, such as a PDA, smart phone, or as a 	   	   portable application on a USB memory stick.  
	
	A unique USB manager is called MyLOK that has a 36KB EEPROM memory chip that is 
	secured by an onboard cryptographic processor.  If the processor is tampered with the 	USB key self destructs.


	(eg. LastPass & Dashlane for Android, iOS, WP & MyLOK ( USB Password Manager )

Token - 

	Your credentials are protected using a security token, typically offering multi-factor 		authentication by combining access control mechanisms -  "something the user 		has" (smart card or USB stick) , "something the user knows" (PIN or password) and/or 		"something the user is" (biometrics - such as a fingerprint, hand, retina, or face scanner).

	(eg. MyLOK USB,  most software based password managers require master password 	and then a second password for other credentials, APC Biometric Password Manager 		)	

Web-based & Cloud-based -

	 Online password manager where credentials are stored on a service provider's servers 	  on the Internet, but handled by password management software running on the client's 		machine.

Stateless - 

	Passwords are generated on the fly from a master passphrase and a tag using a key 		derivation function or KDF that is used in cryptography.  No password information is 		stored either online , locally or cloud based.

	(eg. HashPass,  Petapass, Master Password Manager Helper ( Android ) )


Advantages & Disadvantages - 1 MIN
=================================================

	Different types of password managers may have different advantages and disadvantages.  Below is a generalized listing of each as well as some specifics to different types

ADV
---

-ease of use 
-defense against phishing / pharming


- As I mentioned during the introduction, an advantage is ease of use.  You don't have to remember your collection of passwords.  Only a single password

- Password managers can also be used as a defense against phishing and pharming. Unlike human beings, a password manager program can also incorporate an automated login script that first compares the current site's URL to the stored site's URL. If the two don't match then the password manager does not automatically fill in the login fields. This is intended as a safeguard against visual imitations and look-alike websites.

Password managers can protect against keyloggers or keystroke logging malware. When using a multi-factor authentication password manager that automatically fills in logon fields, the user does not have to type any user names or passwords for the keylogger to pick up.


DISADV
---

-cannot protect against man-in-the-browser attacks
-master password is discovered by keystroke logging malware


- Man in the browser attacks are similiar to man in the middle attacks.  A trojan horse is used to intercept and manipulate transactions between the browser's executable and the security features.  So no form of SSL/Private Key or Multi factor authentication is going to help

- Keyloggers are an advantage as they cannot log the autofill functionality of a password manager,  but the master password could be subjected to a keylogger.  Most PM's have a virtual keyboard to bypass this vulnerability.

================================================( 5 MIN )
IN-DEPTH WITH LASTPASS
================================================


INTRO - 30 SEC
=================================================

- It's a Freemium Based Model

- Their clients include leading e-commerce and financial services brands like Amazon, HSBC, Dell, TD Canada Trust, American Express and Yahoo. 

First worked together developing integrated VoIP (voice over the Internet) and e-commerce technology at eStara, Inc. where they designed, built, launched the most widely deployed web-based 'Push to Talk', 'Call Tracking' and 'Click-to-Chat' services in the world.

SYSTEM REQUIREMENTS
=================================================

- Slide to show system requirements

FEATURES OF EACH FLAVOURS
=================================================

- Has all the basic features of the LastPass application are free, while advanced features like
	support for mobile devices are part of LastPass Premium for $1/month. 


OVERVIEW
================================================

-LastPass uses AES 256-bit government level encryption with a key derivation function ( PBKDF2 ) to encrypt all online and offline sensitive information stored with your account 

-  The standard version of PBKDF2 uses SHA-1 but LastPass uses SHA-256 because it is a slower hash and more resistant to brute force.  You have the option to also set the number of rounds between 5,000 to 200,000 but they don't recommend anything over 10,000, otherwise there may be login issues.

-The key used to encrypt and decrypt this information is based on your master password.  After they complete X number of rounds using PBKDF2,  lastpass uses that for the private key and then runs further rounds to hash the value and that is sent to their servers to allow verification.


================================================( 3 MIN )
SECURITY ISSUES
================================================

So you've heard me talk about what PM's are, what kinds are out there and an overview on a one in particular.  You might be wondering " well that's very nice.  how safe can a password manager possibly be? "

Encryption techniques used by password managers that safeguard your data are 
extremely robust as we covered with lastpass and other password managers.

But what about the methods that they use after your private data is unencrypted and utilized out in the open?  We'll take a look at  the autofill feature in particular.  

( PICTURE YOURSELF... ) Your at Tim's on a laptop with a password manager that autofills your passwords for you.  Mr. Evil Coffee Shop Attacker ( who you don't know is here as well ) has control of the WiFi and it actively monitoring for password information.  There is no malware involved.


SWEEP ATTACKS
=================================================

- Sweep attacks are a form of XSS that work to steal the information that is autofilled by a password manager.  And this can be done without the user ever visiting the actual site on the device with the manager. It's generally done in three steps.  

	1 - Force the user to visit the attackers page at the target site chosen by the user
	2 - Inject Javascript code into the target site
	3 - Javascript code extracts passwords for the attacker

Three types of sweep attacks are listed here

*** IFRAME SWEEP ATTACK - 
	- Attacker targets a page and uses invisible iframes pointing to different target sites
	- Does this via control of a router to inject a login form and javascript
	into each iframe
	- This requires a vulnerable page on a target site ( page served via HTTP instead of 		HTTPS )
	- Your password manager populates all the login forms in the iframes without you
	 knowing and javascript extracts the credentials for the attacker

*** REDIRECT SWEEK ATTACK -
	- You connect to the network
	- HTTP request is sent to you to redirect to a vulnerable page of the attackers choosing
	- You receive it,  get redirected
	- Attacker injects login form and javascript
	- Javascript hides the fact that the site you are visiting is actually the attackers site by 		disguising the page ( hiding the html between the body tags )
	- Password manager autofills on the attacker site and javascript captures
	- Repeats with another HTTP request, hides page, captures.
	- Only very small indications of this occuring in the address bar that can be overlooked

*** WINDOW SWEEP ATTACK
	- Similiar to the iFRAME sweep attack
	- Uses windows instead of iFrames
	- If you have a popup blocker, attacker will try to trick you into disabling your popup 	  	  blocker by say... requiring you to allow the window in order to get internet access.
	- It can be more noticible but can also be disguised with Javascript

CODE
=================================================

This is some javascript code that could be used in the sweep attacks.  One for capturing and extracting the information.  The other is for redirection


POSSIBLE FIXES
=================================================

Despite the sweep attacks, the autofill feature is a very convienent feature to have with a password manager. Something needs to be done in order to make it more secure for use.

	Forcing user interaction
		- ALWAYS require user interaction ( which negates the ' autofill ' feature )
		- Should show the domain name being autofilled.  Limits the chance of the user
		filling the form without meaning to do so.
		- Sites with broken HTTPS ( having bad certificates ), the password manager
		should refuse to autofill anything
	Minimizing user inconvenience. 
		- Always forcing a manual method will obviously be less convienent than allowing 			the manager to autofill for you.  To minimize it you could implement 
		" autofill-and-submit ".  Instead of the autofill happening and then user clicks on
		the submit button, all interaction could be done through the password manager.
		This would be similiar to a complete manual entry.
	Secure Filling
		- A password manager would store the form action along with the username and
		the password information at the time it is saved ( so after initial manual entry )
		- When the form is afterwards autofilled, the fields become unreadable by
		javascript.
		- If the fields are found to be modified the autofill would abort.  The lock on
		the fields would return to normal so javascript can read them again
		- After the autofill successfully takes place, a check is done to match the form action 
		with the one it has stored.  If the domains match then it is allowed to submit.  If not 		the submit fails and everything is erased.
	Server Side Defenses
		- Use HTTPS for EVERYTHING ( instead of HTTP for login pages and 
		then HTTPS to transmit ).  
		- Use  HSTS (HTTP Strict Transport Security) to prevent pages for
		loading with HTTP
		- Use CSP ( Content Security Policy ) to prevent the injection of Javascript directly 
		into a login page
		-Host the login page on a different subdomain.  Because password managers
		consider all levels of a second-level domain equal ( example.com/a is the same as 		example.com ) it would be considered a seperate source reducing the attacking
		area

================================================ ( 2 MIN )
CONCLUSION
================================================

OPINION - 2 MIN
=================================================

Hopefully this presentation gave you a little more insight into the world of password managers.  They seem to be a necessary tool these days with all the username and 
password information we have to manage.

Some things I thought about while producing this presentation:

Issues with password managers are based more on what happens to the information after it's decrypted rather than how an attacker will break into an encrypted vault.

You do have to take a " leap of faith " when working with a password manager and trust that your data is safe.  If you use one or decide to use one, make sure you take a good look at what they offer and that they are legit.  Some guidelines are in the handout for you to view.

I've since upgraded my package with Lastpass to Premium so that I could get the most out of it and I've also turned off my autofill functionality.


DEFINITIONS
----------------------

SHA 256 - 
	Part of the SHA-2 family.  Is a set of cryptographic hash functions designed by the NSA (U.S. National Security Agency).[3] SHA stands for Secure Hash Algorithm


(PBKDF2 -  applies a pseudorandom function, such as a cryptographic hash, cipher, or HMAC  to the input password or passphrase along with a salt value and repeats the process many times to produce a derived key, which can then be used as a cryptographic key in subsequent operations. ) DK = PBKDF2(PRF, Password, Salt, c, dkLen)



The client-side PBKDF2 yeilds the key that is used by AES256. That does not get sent to us during logins, instead we do an additional round of hashing and that hash is what is sent to us for verification. It's a one-way hash, though, so again we cannot get the key from it nor can we decrypt the data on our end. When you login, that hash is what's sent to verify if you can download your encrypted data.

LastPass has opted to use SHA-256, a slower hashing algorithm that provides more protection against brute-force attacks. LastPass utilizes the PBKDF2 function implemented with SHA-256 to turn your master password into your encryption key. LastPass performs x number of rounds of the function to create the encryption key, before a single additional round of PBKDF2 is done to create your login hash.
The entire process is conducted client-side. The resulting login hash is what is communicated with LastPass. LastPass uses the hash to verify that you are entering the correct master password when logging in to your account.
LastPass also performs a large number of rounds of PBKDF2 server-side. This implementation of PBKDF2 client-side and server-side ensures that the two pieces of your data- the part that’s stored offline locally and the part that’s stored online on LastPass servers- are thoroughly protected:




PRF is a pseudorandom function of two parameters with output length hLen (e.g. a keyed HMAC)
Password is the master password from which a derived key is generated
Salt is a cryptographic salt
c is the number of iterations desired
dkLen is the desired length of the derived key
DK is the generated derived key



PBKDF2 applies a pseudorandom function, such as a cryptographic hash, cipher, or HMAC to the input password or passphrase along with a salt value and repeats the process many times to produce a derived key, which can then be used as a cryptographic key in subsequent operations. The added computational work makes password cracking much more difficult, and is known as key stretching. When the standard was written in 2000, the recommended minimum number of iterations was 1000, but the parameter is intended to be increased over time as CPU speeds increase. Having a salt added to the password reduces the ability to use precomputed hashes (rainbow tables) for attacks, and means that multiple passwords have to be tested individually, not all at once. The standard recommends a salt length of at least 64 bits.




